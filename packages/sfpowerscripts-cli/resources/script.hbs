let metadataTypeColours = {
  CustomField: '#3ac4e1',
  Layout: '#ad277e',
  ApexClass: '#4139dd',
  Report: '#d57dbb',
  ValidationRule: '#2a0e10',
  Dashboard: '#8ab33c',
  PermissionSet: '#7926bd',
  ApexTrigger: '#f2e605'
};

let rgbToHex = function (rgb) {
  let hex = Number(rgb).toString(16);
  if (hex.length < 2) {
    hex = "0" + hex;
  }
  return hex;
};

let fullColorHex = function(r,g,b) {
  var red = rgbToHex(r);
  var green = rgbToHex(g);
  var blue = rgbToHex(b);
  return red+green+blue;
};

// Initial Layout
document.addEventListener('DOMContentLoaded', function(){
  var cy = window.cy = cytoscape({
    container: document.getElementById('cy'),

    boxSelectionEnabled: false,
    autounselectify: true,
    // demo your layout
    layout: {
      name: 'dagre',
      nodeDimensionsIncludeLabels: true,
      rankDir: 'LR'
    },
    style: [
      {
        selector: 'node',
        style: {
          'label': 'data(label)',
          'text-halign': 'right',
          'text-valign': 'center',
					'font-size': "5px",
          'text-margin-x': "5px",
          'background-color': function (ele) {
            let type = ele.data('type');
            return metadataTypeColours[type] ? metadataTypeColours[type] : '#756D76';
          },
          'border-width': '1',
          'border-color': function (ele) {
            let classes = ele.classes();
            return classes.includes("changed") ? "#00FF00" : "#FFF";
          },
          'width': 5,
          'height': 5,
          'shape': function (ele) {
            let str = '' + ele.data('shape');
            return str.toLowerCase();}
        }
      },

      {
        selector: 'edge',
        style: {
          'curve-style': 'bezier',
          'line-style': 'dashed',
          'target-arrow-shape': 'triangle',
          'arrow-scale': '0.3',
          'width': 1,
          'opacity': 0.30,
        }
      }
    ],
    elements: {{{stringify elements}}},
    wheelSensitivity: 0.5,
  });

  const queryString = new URLSearchParams(window.location.search);
  const maxDepth = queryString.get("depth");

  if (maxDepth) {
    let nodesToRemove = cy.collection();
    cy.elements().bfs({
      roots: '#root',
      visit: function(v,e,u,i,depth) {
        if (depth > maxDepth)
          nodesToRemove = nodesToRemove.union(v);
      }
    });

    if (nodesToRemove.size() > 0) {
      nodesToRemove.remove();
      let alert = document.getElementById("alert");
      alert.textContent = `WARNING: graph has been truncated as depth exceeds ${maxDepth}. The full graph is available in artifacts.`
    }
  }
});
